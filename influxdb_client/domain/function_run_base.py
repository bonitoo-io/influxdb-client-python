# coding: utf-8

"""
Influx OSS API Service.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FunctionRunBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'status': 'str',
        'error': 'str',
        'logs': 'list[FunctionRunLog]',
        'started_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'error': 'error',
        'logs': 'logs',
        'started_at': 'startedAt'
    }

    def __init__(self, id=None, status=None, error=None, logs=None, started_at=None):  # noqa: E501,D401,D403
        """FunctionRunBase - a model defined in OpenAPI."""  # noqa: E501
        self._id = None
        self._status = None
        self._error = None
        self._logs = None
        self._started_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error
        if logs is not None:
            self.logs = logs
        if started_at is not None:
            self.started_at = started_at

    @property
    def id(self):
        """Get the id of this FunctionRunBase.

        :return: The id of this FunctionRunBase.
        :rtype: str
        """  # noqa: E501
        return self._id

    @id.setter
    def id(self, id):
        """Set the id of this FunctionRunBase.

        :param id: The id of this FunctionRunBase.
        :type: str
        """  # noqa: E501
        self._id = id

    @property
    def status(self):
        """Get the status of this FunctionRunBase.

        :return: The status of this FunctionRunBase.
        :rtype: str
        """  # noqa: E501
        return self._status

    @status.setter
    def status(self, status):
        """Set the status of this FunctionRunBase.

        :param status: The status of this FunctionRunBase.
        :type: str
        """  # noqa: E501
        self._status = status

    @property
    def error(self):
        """Get the error of this FunctionRunBase.

        :return: The error of this FunctionRunBase.
        :rtype: str
        """  # noqa: E501
        return self._error

    @error.setter
    def error(self, error):
        """Set the error of this FunctionRunBase.

        :param error: The error of this FunctionRunBase.
        :type: str
        """  # noqa: E501
        self._error = error

    @property
    def logs(self):
        """Get the logs of this FunctionRunBase.

        :return: The logs of this FunctionRunBase.
        :rtype: list[FunctionRunLog]
        """  # noqa: E501
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Set the logs of this FunctionRunBase.

        :param logs: The logs of this FunctionRunBase.
        :type: list[FunctionRunLog]
        """  # noqa: E501
        self._logs = logs

    @property
    def started_at(self):
        """Get the started_at of this FunctionRunBase.

        :return: The started_at of this FunctionRunBase.
        :rtype: datetime
        """  # noqa: E501
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Set the started_at of this FunctionRunBase.

        :param started_at: The started_at of this FunctionRunBase.
        :type: datetime
        """  # noqa: E501
        self._started_at = started_at

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, FunctionRunBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
