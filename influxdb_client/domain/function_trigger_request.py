# coding: utf-8

"""
InfluxData Managed Functions CRUD API.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

OpenAPI spec version: 0.1.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from influxdb_client.domain.function_invocation_params import FunctionInvocationParams


class FunctionTriggerRequest(FunctionInvocationParams):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'script': 'str',
        'method': 'str',
        'org_id': 'str',
        'org': 'str',
        'language': 'FunctionLanguage'
    }

    attribute_map = {
        'script': 'script',
        'method': 'method',
        'org_id': 'orgID',
        'org': 'org',
        'language': 'language'
    }

    def __init__(self, script=None, method=None, org_id=None, org=None, language=None):  # noqa: E501,D401,D403
        """FunctionTriggerRequest - a model defined in OpenAPI."""  # noqa: E501
        FunctionInvocationParams.__init__(self)  # noqa: E501

        self._script = None
        self._method = None
        self._org_id = None
        self._org = None
        self._language = None
        self.discriminator = None

        self.script = script
        self.method = method
        if org_id is not None:
            self.org_id = org_id
        if org is not None:
            self.org = org
        self.language = language

    @property
    def script(self):
        """Get the script of this FunctionTriggerRequest.

        script is script to be executed

        :return: The script of this FunctionTriggerRequest.
        :rtype: str
        """  # noqa: E501
        return self._script

    @script.setter
    def script(self, script):
        """Set the script of this FunctionTriggerRequest.

        script is script to be executed

        :param script: The script of this FunctionTriggerRequest.
        :type: str
        """  # noqa: E501
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501
        self._script = script

    @property
    def method(self):
        """Get the method of this FunctionTriggerRequest.

        :return: The method of this FunctionTriggerRequest.
        :rtype: str
        """  # noqa: E501
        return self._method

    @method.setter
    def method(self, method):
        """Set the method of this FunctionTriggerRequest.

        :param method: The method of this FunctionTriggerRequest.
        :type: str
        """  # noqa: E501
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        self._method = method

    @property
    def org_id(self):
        """Get the org_id of this FunctionTriggerRequest.

        :return: The org_id of this FunctionTriggerRequest.
        :rtype: str
        """  # noqa: E501
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Set the org_id of this FunctionTriggerRequest.

        :param org_id: The org_id of this FunctionTriggerRequest.
        :type: str
        """  # noqa: E501
        self._org_id = org_id

    @property
    def org(self):
        """Get the org of this FunctionTriggerRequest.

        :return: The org of this FunctionTriggerRequest.
        :rtype: str
        """  # noqa: E501
        return self._org

    @org.setter
    def org(self, org):
        """Set the org of this FunctionTriggerRequest.

        :param org: The org of this FunctionTriggerRequest.
        :type: str
        """  # noqa: E501
        self._org = org

    @property
    def language(self):
        """Get the language of this FunctionTriggerRequest.

        :return: The language of this FunctionTriggerRequest.
        :rtype: FunctionLanguage
        """  # noqa: E501
        return self._language

    @language.setter
    def language(self, language):
        """Set the language of this FunctionTriggerRequest.

        :param language: The language of this FunctionTriggerRequest.
        :type: FunctionLanguage
        """  # noqa: E501
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        self._language = language

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, FunctionTriggerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
