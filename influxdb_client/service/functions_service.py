# coding: utf-8

"""
Influx OSS API Service.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six


class FunctionsService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):  # noqa: E501,D401,D403
        """FunctionsService - a operation defined in OpenAPI."""
        if api_client is None:
            raise ValueError("Invalid value for `api_client`, must be defined.")
        self.api_client = api_client

    def delete_functions_id(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Delete a function.

        Deletes a function and all associated records
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_functions_id(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The ID of the function to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_functions_id_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_functions_id_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def delete_functions_id_with_http_info(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Delete a function.

        Deletes a function and all associated records
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_functions_id_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The ID of the function to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_functions_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `delete_functions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def get_functions(self, **kwargs):  # noqa: E501,D401,D403
        """List all Functions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: The name of the organization.
        :param str org_id: The organization ID.
        :param int limit: The number of functions to return
        :param int offset: Offset for pagination
        :return: Functions
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_functions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_functions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_functions_with_http_info(self, **kwargs):  # noqa: E501,D401,D403
        """List all Functions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org: The name of the organization.
        :param str org_id: The organization ID.
        :param int limit: The number of functions to return
        :param int offset: Offset for pagination
        :return: Functions
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['org', 'org_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_functions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org' in local_var_params:
            query_params.append(('org', local_var_params['org']))  # noqa: E501
        if 'org_id' in local_var_params:
            query_params.append(('orgID', local_var_params['org_id']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Functions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def get_functions_id(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Retrieve a function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The function ID. (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_functions_id_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_functions_id_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def get_functions_id_with_http_info(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Retrieve a function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The function ID. (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_functions_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_functions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Function',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def get_functions_id_invoke(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Manually invoke a function with params in query.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_invoke(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :param dict(str, object) params:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_functions_id_invoke_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_functions_id_invoke_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def get_functions_id_invoke_with_http_info(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Manually invoke a function with params in query.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_invoke_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :param dict(str, object) params:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_functions_id_invoke" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_functions_id_invoke`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501

        query_params = []
        if 'params' in local_var_params:
            query_params.append(('params', local_var_params['params']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}/invoke', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def get_functions_id_runs(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """List runs for a function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_runs(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The ID of the function to get runs for. (required)
        :param int limit: The number of functions to return
        :param int offset: Offset for pagination
        :return: FunctionRuns
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_functions_id_runs_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_functions_id_runs_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def get_functions_id_runs_with_http_info(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """List runs for a function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_runs_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The ID of the function to get runs for. (required)
        :param int limit: The number of functions to return
        :param int offset: Offset for pagination
        :return: FunctionRuns
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_functions_id_runs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_functions_id_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionRuns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def get_functions_id_runs_id(self, function_id, run_id, **kwargs):  # noqa: E501,D401,D403
        """Retrieve a single run for a function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_runs_id(function_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The function ID. (required)
        :param str run_id: The run ID. (required)
        :return: FunctionRun
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_functions_id_runs_id_with_http_info(function_id, run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_functions_id_runs_id_with_http_info(function_id, run_id, **kwargs)  # noqa: E501
            return data

    def get_functions_id_runs_id_with_http_info(self, function_id, run_id, **kwargs):  # noqa: E501,D401,D403
        """Retrieve a single run for a function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_id_runs_id_with_http_info(function_id, run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The function ID. (required)
        :param str run_id: The run ID. (required)
        :return: FunctionRun
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_functions_id_runs_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_functions_id_runs_id`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in local_var_params or
                local_var_params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_functions_id_runs_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501
        if 'run_id' in local_var_params:
            path_params['runID'] = local_var_params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}/runs/{runID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def patch_functions_id(self, function_id, function_update_request, **kwargs):  # noqa: E501,D401,D403
        """Update a function.

        Update a function
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_functions_id(function_id, function_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The function ID. (required)
        :param FunctionUpdateRequest function_update_request: Function update to apply (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_functions_id_with_http_info(function_id, function_update_request, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_functions_id_with_http_info(function_id, function_update_request, **kwargs)  # noqa: E501
            return data

    def patch_functions_id_with_http_info(self, function_id, function_update_request, **kwargs):  # noqa: E501,D401,D403
        """Update a function.

        Update a function
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_functions_id_with_http_info(function_id, function_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: The function ID. (required)
        :param FunctionUpdateRequest function_update_request: Function update to apply (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id', 'function_update_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_functions_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `patch_functions_id`")  # noqa: E501
        # verify the required parameter 'function_update_request' is set
        if ('function_update_request' not in local_var_params or
                local_var_params['function_update_request'] is None):
            raise ValueError("Missing the required parameter `function_update_request` when calling `patch_functions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'function_update_request' in local_var_params:
            body_params = local_var_params['function_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Function',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def post_functions(self, function_create_request, **kwargs):  # noqa: E501,D401,D403
        """Create a new function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_functions(function_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionCreateRequest function_create_request: Function to create (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_functions_with_http_info(function_create_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_functions_with_http_info(function_create_request, **kwargs)  # noqa: E501
            return data

    def post_functions_with_http_info(self, function_create_request, **kwargs):  # noqa: E501,D401,D403
        """Create a new function.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_functions_with_http_info(function_create_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionCreateRequest function_create_request: Function to create (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_create_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_functions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_create_request' is set
        if ('function_create_request' not in local_var_params or
                local_var_params['function_create_request'] is None):
            raise ValueError("Missing the required parameter `function_create_request` when calling `post_functions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'function_create_request' in local_var_params:
            body_params = local_var_params['function_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Function',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def post_functions_id_invoke(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Manually invoke a function with params in request body.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_functions_id_invoke(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :param FunctionInvocationParams function_invocation_params:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_functions_id_invoke_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_functions_id_invoke_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def post_functions_id_invoke_with_http_info(self, function_id, **kwargs):  # noqa: E501,D401,D403
        """Manually invoke a function with params in request body.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_functions_id_invoke_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :param FunctionInvocationParams function_invocation_params:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_id', 'function_invocation_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_functions_id_invoke" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in local_var_params or
                local_var_params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `post_functions_id_invoke`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in local_var_params:
            path_params['functionID'] = local_var_params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'function_invocation_params' in local_var_params:
            body_params = local_var_params['function_invocation_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/{functionID}/invoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)

    def post_functions_trigger(self, function_trigger_request, **kwargs):  # noqa: E501,D401,D403
        """Manually trigger a function without creating an associated function resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_functions_trigger(function_trigger_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionTriggerRequest function_trigger_request: Function to be triggered (required)
        :return: FunctionTriggerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_functions_trigger_with_http_info(function_trigger_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_functions_trigger_with_http_info(function_trigger_request, **kwargs)  # noqa: E501
            return data

    def post_functions_trigger_with_http_info(self, function_trigger_request, **kwargs):  # noqa: E501,D401,D403
        """Manually trigger a function without creating an associated function resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_functions_trigger_with_http_info(function_trigger_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionTriggerRequest function_trigger_request: Function to be triggered (required)
        :return: FunctionTriggerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """  # noqa: E501
        local_var_params = locals()

        all_params = ['function_trigger_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('urlopen_kw')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_functions_trigger" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'function_trigger_request' is set
        if ('function_trigger_request' not in local_var_params or
                local_var_params['function_trigger_request'] is None):
            raise ValueError("Missing the required parameter `function_trigger_request` when calling `post_functions_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'function_trigger_request' in local_var_params:
            body_params = local_var_params['function_trigger_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        # urlopen optional setting
        urlopen_kw = None
        if 'urlopen_kw' in kwargs:
            urlopen_kw = kwargs['urlopen_kw']

        return self.api_client.call_api(
            '/api/v2/functions/trigger', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionTriggerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            urlopen_kw=urlopen_kw)
