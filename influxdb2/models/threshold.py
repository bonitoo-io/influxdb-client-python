# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Threshold(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'level': 'CheckStatusLevel',
        'all_values': 'bool',
        'lower_bound': 'float',
        'upper_bound': 'float'
    }

    attribute_map = {
        'level': 'level',
        'all_values': 'allValues',
        'lower_bound': 'lowerBound',
        'upper_bound': 'upperBound'
    }

    def __init__(self, level=None, all_values=None, lower_bound=None, upper_bound=None):  # noqa: E501
        """Threshold - a model defined in OpenAPI"""  # noqa: E501

        self._level = None
        self._all_values = None
        self._lower_bound = None
        self._upper_bound = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if all_values is not None:
            self.all_values = all_values
        if lower_bound is not None:
            self.lower_bound = lower_bound
        if upper_bound is not None:
            self.upper_bound = upper_bound

    @property
    def level(self):
        """Gets the level of this Threshold.  # noqa: E501


        :return: The level of this Threshold.  # noqa: E501
        :rtype: CheckStatusLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Threshold.


        :param level: The level of this Threshold.  # noqa: E501
        :type: CheckStatusLevel
        """

        self._level = level

    @property
    def all_values(self):
        """Gets the all_values of this Threshold.  # noqa: E501

        if true, only alert if all values meet threshold  # noqa: E501

        :return: The all_values of this Threshold.  # noqa: E501
        :rtype: bool
        """
        return self._all_values

    @all_values.setter
    def all_values(self, all_values):
        """Sets the all_values of this Threshold.

        if true, only alert if all values meet threshold  # noqa: E501

        :param all_values: The all_values of this Threshold.  # noqa: E501
        :type: bool
        """

        self._all_values = all_values

    @property
    def lower_bound(self):
        """Gets the lower_bound of this Threshold.  # noqa: E501


        :return: The lower_bound of this Threshold.  # noqa: E501
        :rtype: float
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this Threshold.


        :param lower_bound: The lower_bound of this Threshold.  # noqa: E501
        :type: float
        """

        self._lower_bound = lower_bound

    @property
    def upper_bound(self):
        """Gets the upper_bound of this Threshold.  # noqa: E501


        :return: The upper_bound of this Threshold.  # noqa: E501
        :rtype: float
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this Threshold.


        :param upper_bound: The upper_bound of this Threshold.  # noqa: E501
        :type: float
        """

        self._upper_bound = upper_bound

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Threshold):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
